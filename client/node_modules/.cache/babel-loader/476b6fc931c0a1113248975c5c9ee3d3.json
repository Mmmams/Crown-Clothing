{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fecthCollectionFailure, fetchCollectionSuccess } from \"./shop.actions\";\nimport shopActionsTypes from \"./shop.types\"; // redux saga doesnt use dispatch to pass actions, saga use put method\n\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collection\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // first arg in call is fucntion other args are arguments for this fucntion\n\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fecthCollectionFailure(error.message));\n  }\n} //takeLatest do similar work which do takeEvery, but will complete only last(click for example)\n\nexport function* fetchCollectionStart() {\n  yield takeLatest(shopActionsTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionAsync), call(fetchCollectionStart)]);\n}","map":{"version":3,"sources":["C:/Users/Siarhei.Mamykin/Desktop/Crown-Clothing-/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fecthCollectionFailure","fetchCollectionSuccess","shopActionsTypes","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTION_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,gBAA/D;AAEA,OAAOC,gBAAP,MAA6B,cAA7B,C,CACA;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,MAAI;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,YAArB,CAAtB;AAEA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AAEA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAC/BI,+BAD+B,EAE/BO,QAF+B,CAAjC,CALE,CAQC;;AACH,UAAMV,GAAG,CAACK,sBAAsB,CAACO,cAAD,CAAvB,CAAT;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACI,sBAAsB,CAACS,KAAK,CAACC,OAAP,CAAvB,CAAT;AACD;AACF,C,CACD;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMjB,UAAU,CACdQ,gBAAgB,CAACU,sBADH,EAEdT,oBAFc,CAAhB;AAID;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACQ,oBAAD,CAAL,EAA6BR,IAAI,CAACgB,oBAAD,CAAjC,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport { fecthCollectionFailure, fetchCollectionSuccess } from \"./shop.actions\";\r\n\r\nimport shopActionsTypes from \"./shop.types\";\r\n// redux saga doesnt use dispatch to pass actions, saga use put method\r\nexport function* fetchCollectionAsync() {\r\n  try {\r\n    const collectionRef = firestore.collection(\"collection\");\r\n\r\n    const snapshot = yield collectionRef.get();\r\n\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    ); // first arg in call is fucntion other args are arguments for this fucntion\r\n    yield put(fetchCollectionSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fecthCollectionFailure(error.message));\r\n  }\r\n}\r\n//takeLatest do similar work which do takeEvery, but will complete only last(click for example)\r\nexport function* fetchCollectionStart() {\r\n  yield takeLatest(\r\n    shopActionsTypes.FETCH_COLLECTION_START,\r\n    fetchCollectionAsync\r\n  );\r\n}\r\n\r\nexport function* shopSagas() {\r\n  yield all([call(fetchCollectionAsync), call(fetchCollectionStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}