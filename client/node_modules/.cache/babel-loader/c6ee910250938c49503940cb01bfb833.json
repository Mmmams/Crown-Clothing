{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport { auth, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport shopActionsTypes from \"./shop.types\";\nexport function* fetchCollectionAsync() {\n  const collectionRef = firestore.collection(\"collection\");\n  dispatch(fetchCollectionStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionSuccess(collectionsMap));\n  }).catch(error => dispatch(fecthCollectionFailure(error.message)));\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(shopActionsTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Users/Siarhei.Mamykin/Desktop/Crown-Clothing-/src/redux/shop/shop.sagas.js"],"names":["takeEvery","auth","convertCollectionsSnapshotToMap","shopActionsTypes","fetchCollectionAsync","collectionRef","firestore","collection","dispatch","fetchCollectionStart","get","then","snapshot","collectionsMap","fetchCollectionSuccess","catch","error","fecthCollectionFailure","message","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SACEC,IADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAOC,gBAAP,MAA6B,cAA7B;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,YAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,oBAAoB,EAArB,CAAR;AAEAJ,EAAAA,aAAa,CACVK,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,UAAMC,cAAc,GAAGX,+BAA+B,CAACU,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACM,sBAAsB,CAACD,cAAD,CAAvB,CAAR;AACD,GALH,EAMGE,KANH,CAMUC,KAAD,IAAWR,QAAQ,CAACS,sBAAsB,CAACD,KAAK,CAACE,OAAP,CAAvB,CAN5B;AAOD;AAED,OAAO,UAAUT,oBAAV,GAAiC;AACtC,QAAMT,SAAS,CACbG,gBAAgB,CAACgB,sBADJ,EAEbf,oBAFa,CAAf;AAID","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\r\nimport {\r\n  auth,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport shopActionsTypes from \"./shop.types\";\r\n\r\nexport function* fetchCollectionAsync() {\r\n  const collectionRef = firestore.collection(\"collection\");\r\n  dispatch(fetchCollectionStart());\r\n\r\n  collectionRef\r\n    .get()\r\n    .then((snapshot) => {\r\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n      dispatch(fetchCollectionSuccess(collectionsMap));\r\n    })\r\n    .catch((error) => dispatch(fecthCollectionFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionStart() {\r\n  yield takeEvery(\r\n    shopActionsTypes.FETCH_COLLECTION_START,\r\n    fetchCollectionAsync\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}