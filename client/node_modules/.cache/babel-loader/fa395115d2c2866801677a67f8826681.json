{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyAlc1ffp9YQcoTx8n0y6L23Y5EK6b1Zl_E\",\n  authDomain: \"crwn-clothing-ab60b.firebaseapp.com\",\n  projectId: \"crwn-clothing-ab60b\",\n  storageBucket: \"crwn-clothing-ab60b.appspot.com\",\n  messagingSenderId: \"39735950804\",\n  appId: \"1:39735950804:web:be190b1354e305c7fbea41\",\n  measurementId: \"G-1B01PBG33Y\"\n}; //for better understanding firstly write docs\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error user creating\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objToAdd) => {\n  // функция для автоматического внесения информации о товарах в firebase(используется один раз, так как нам не надо добовлять ееё при кажом рендере)\n  console.log(objToAdd);\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objToAdd.forEach(elem => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, elem);\n  });\n  return await batch.commit(); // return promise, when  .commit will succeeds it is return a null value\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase; // var firebaseConfig = {\n//   apiKey: \"AIzaSyAlc1ffp9YQcoTx8n0y6L23Y5EK6b1Zl_E\",\n//   authDomain: \"crwn-clothing-ab60b.firebaseapp.com\",\n//   databaseURL: \"https://crwn-clothing-ab60b-default-rtdb.firebaseio.com\",\n//   projectId: \"crwn-clothing-ab60b\",\n//   storageBucket: \"crwn-clothing-ab60b.appspot.com\",\n//   messagingSenderId: \"39735950804\",\n//   appId: \"1:39735950804:web:be190b1354e305c7fbea41\",\n//   measurementId: \"G-1B01PBG33Y\"\n// };","map":{"version":3,"sources":["/home/sergei/Work/Crown-Clothing-/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","userSnapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objToAdd","collectionRef","collection","batch","forEach","elem","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","acc","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: \"AIzaSyAlc1ffp9YQcoTx8n0y6L23Y5EK6b1Zl_E\",\n  authDomain: \"crwn-clothing-ab60b.firebaseapp.com\",\n  projectId: \"crwn-clothing-ab60b\",\n  storageBucket: \"crwn-clothing-ab60b.appspot.com\",\n  messagingSenderId: \"39735950804\",\n  appId: \"1:39735950804:web:be190b1354e305c7fbea41\",\n  measurementId: \"G-1B01PBG33Y\",\n};\n//for better understanding firstly write docs\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n  if (!userSnapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error user creating\", error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objToAdd) => {\n  // функция для автоматического внесения информации о товарах в firebase(используется один раз, так как нам не надо добовлять ееё при кажом рендере)\n  console.log(objToAdd);\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n\n  objToAdd.forEach((elem) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, elem);\n  });\n\n  return await batch.commit(); // return promise, when  .commit will succeeds it is return a null value\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  return transformedCollection.reduce((acc, collection) => {\n    acc[collection.title.toLowerCase()] = collection;\n    return acc;\n  }, {});\n};\n\nfirebase.initializeApp(config);\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n\n// var firebaseConfig = {\n//   apiKey: \"AIzaSyAlc1ffp9YQcoTx8n0y6L23Y5EK6b1Zl_E\",\n//   authDomain: \"crwn-clothing-ab60b.firebaseapp.com\",\n//   databaseURL: \"https://crwn-clothing-ab60b-default-rtdb.firebaseio.com\",\n//   projectId: \"crwn-clothing-ab60b\",\n//   storageBucket: \"crwn-clothing-ab60b.appspot.com\",\n//   messagingSenderId: \"39735950804\",\n//   appId: \"1:39735950804:web:be190b1354e305c7fbea41\",\n//   measurementId: \"G-1B01PBG33Y\"\n// };\n"]},"metadata":{},"sourceType":"module"}