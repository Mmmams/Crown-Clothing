{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Siarhei.Mamykin/Desktop/Crown-Clothing-/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionAsync),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionStart),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(shopSagas);import{takeLatest,call,put,all}from\"redux-saga/effects\";import{firestore,convertCollectionsSnapshotToMap}from\"../../firebase/firebase.utils\";import{fecthCollectionFailure,fetchCollectionSuccess}from\"./shop.actions\";import shopActionsTypes from\"./shop.types\";// redux saga doesnt use dispatch to pass actions, saga use put method\nexport function fetchCollectionAsync(){var collectionRef,snapshot,collectionsMap;return _regeneratorRuntime.wrap(function fetchCollectionAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;collectionRef=firestore.collection(\"collection\");_context.next=4;return collectionRef.get();case 4:snapshot=_context.sent;_context.next=7;return call(convertCollectionsSnapshotToMap,snapshot);case 7:collectionsMap=_context.sent;_context.next=10;return put(fetchCollectionSuccess(collectionsMap));case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put(fecthCollectionFailure(_context.t0.message));case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}//takeLatest do similar work which do takeEvery, but will complete only last(click for example)\nexport function fetchCollectionStart(){return _regeneratorRuntime.wrap(function fetchCollectionStart$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(shopActionsTypes.FETCH_COLLECTION_START,fetchCollectionAsync);case 2:case\"end\":return _context2.stop();}}},_marked2);}export function shopSagas(){return _regeneratorRuntime.wrap(function shopSagas$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([call(fetchCollectionStart)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["C:/Users/Siarhei.Mamykin/Desktop/Crown-Clothing-/client/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionAsync","fetchCollectionStart","shopSagas","takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fecthCollectionFailure","fetchCollectionSuccess","shopActionsTypes","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTION_START"],"mappings":"uNAUiBA,oB,iDAgBAC,oB,iDAOAC,S,EAjCjB,OAASC,UAAT,CAAqBC,IAArB,CAA2BC,GAA3B,CAAgCC,GAAhC,KAA2C,oBAA3C,CACA,OACEC,SADF,CAEEC,+BAFF,KAGO,+BAHP,CAKA,OAASC,sBAAT,CAAiCC,sBAAjC,KAA+D,gBAA/D,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,cAA7B,CACA;AACA,MAAO,SAAUX,CAAAA,oBAAV,0LAEGY,aAFH,CAEmBL,SAAS,CAACM,UAAV,CAAqB,YAArB,CAFnB,iBAIc,MAAMD,CAAAA,aAAa,CAACE,GAAd,EAAN,CAJd,OAIGC,QAJH,+BAMoB,MAAMX,CAAAA,IAAI,CAC/BI,+BAD+B,CAE/BO,QAF+B,CAAV,CANpB,OAMGC,cANH,gCAUH,MAAMX,CAAAA,GAAG,CAACK,sBAAsB,CAACM,cAAD,CAAvB,CAAT,CAVG,0GAYH,MAAMX,CAAAA,GAAG,CAACI,sBAAsB,CAAC,YAAMQ,OAAP,CAAvB,CAAT,CAZG,qEAeP;AACA,MAAO,SAAUhB,CAAAA,oBAAV,oJACL,MAAME,CAAAA,UAAU,CACdQ,gBAAgB,CAACO,sBADH,CAEdlB,oBAFc,CAAhB,CADK,wDAOP,MAAO,SAAUE,CAAAA,SAAV,yIACL,MAAMI,CAAAA,GAAG,CAAC,CAACF,IAAI,CAACH,oBAAD,CAAL,CAAD,CAAT,CADK","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport { fecthCollectionFailure, fetchCollectionSuccess } from \"./shop.actions\";\r\n\r\nimport shopActionsTypes from \"./shop.types\";\r\n// redux saga doesnt use dispatch to pass actions, saga use put method\r\nexport function* fetchCollectionAsync() {\r\n  try {\r\n    const collectionRef = firestore.collection(\"collection\");\r\n\r\n    const snapshot = yield collectionRef.get();\r\n\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    ); // first arg in call is fucntion other args are arguments for this fucntion\r\n    yield put(fetchCollectionSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fecthCollectionFailure(error.message));\r\n  }\r\n}\r\n//takeLatest do similar work which do takeEvery, but will complete only last(click for example)\r\nexport function* fetchCollectionStart() {\r\n  yield takeLatest(\r\n    shopActionsTypes.FETCH_COLLECTION_START,\r\n    fetchCollectionAsync\r\n  );\r\n}\r\n\r\nexport function* shopSagas() {\r\n  yield all([call(fetchCollectionStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}