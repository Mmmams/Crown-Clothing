{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyAlc1ffp9YQcoTx8n0y6L23Y5EK6b1Zl_E\",\n  authDomain: \"crwn-clothing-ab60b.firebaseapp.com\",\n  projectId: \"crwn-clothing-ab60b\",\n  storageBucket: \"crwn-clothing-ab60b.appspot.com\",\n  messagingSenderId: \"39735950804\",\n  appId: \"1:39735950804:web:be190b1354e305c7fbea41\",\n  measurementId: \"G-1B01PBG33Y\"\n}; //for better understanding firstly write docs\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const userSnapshot = await userRef.get();\n\n  if (!userSnapshot.exists) {\n    console.log(userAuth);\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error user creating\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objToAdd) => {\n  // функция для автоматического внесения информации о товарах в firebase(используется один раз, так как нам не надо добовлять ееё при кажом рендере)\n  console.log(objToAdd);\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objToAdd.forEach(elem => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, elem);\n  });\n  return await batch.commit(); // return promise, when  .commit will succeeds it is return a null value\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Siarhei.Mamykin/Desktop/Crown-Clothing-/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","userSnapshot","get","exists","console","log","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objToAdd","collectionRef","collection","batch","forEach","elem","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","id","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\n\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAlc1ffp9YQcoTx8n0y6L23Y5EK6b1Zl_E\",\r\n  authDomain: \"crwn-clothing-ab60b.firebaseapp.com\",\r\n  projectId: \"crwn-clothing-ab60b\",\r\n  storageBucket: \"crwn-clothing-ab60b.appspot.com\",\r\n  messagingSenderId: \"39735950804\",\r\n  appId: \"1:39735950804:web:be190b1354e305c7fbea41\",\r\n  measurementId: \"G-1B01PBG33Y\",\r\n};\r\n//for better understanding firstly write docs\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const userSnapshot = await userRef.get();\r\n  if (!userSnapshot.exists) {\r\n    console.log(userAuth);\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error user creating\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objToAdd) => {\r\n  // функция для автоматического внесения информации о товарах в firebase(используется один раз, так как нам не надо добовлять ееё при кажом рендере)\r\n  console.log(objToAdd);\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  const batch = firestore.batch();\r\n\r\n  objToAdd.forEach((elem) => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, elem);\r\n  });\r\n\r\n  return await batch.commit(); // return promise, when  .commit will succeeds it is return a null value\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.map((doc) => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n  console.log(transformedCollection);\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}