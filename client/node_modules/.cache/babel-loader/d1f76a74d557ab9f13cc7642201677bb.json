{"ast":null,"code":"var _jsxFileName = \"/home/sergei/Work/Crown-Clothing-/client/src/components/stripe-button/stripe-button.component.jsx\";\nimport React from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\nimport { clearCart } from \"../../redux/cart/cart.actions\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StripeCheckoutButton = ({\n  price,\n  clearCart\n}) => {\n  const priceForStripe = price * 100;\n  const pablishableKey = \"pk_test_51IWJi6KJCKx0WD0TlB75VbbG97BlTZ5tO6aAzjtrlFK5xi21Viyf2ZTWUnCuYmqP9bpp2VXMv0N1QDcuj5aSu22k003bMpgeBE\";\n\n  const onToken = token => {\n    axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount: priceForStripe,\n        token: token\n      }\n    }).then(res => {\n      clearCart();\n      alert(\"succesful payment\");\n    }).catch(error => {\n      console.log(\"Payment Error: \", error);\n      alert(\"There was an issue with your payment! Please make sure you use the provided credit card.\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(StripeCheckout, {\n    name: \"CROWN CLOTHING\",\n    label: \"Pay Now\",\n    billingAddress: true,\n    shippingAddress: true,\n    image: \"https://svgshare.com/i/CUz.svg\",\n    description: `Yout total is $${price}`,\n    amount: priceForStripe,\n    panelLabel: \"Pay Now\",\n    token: onToken,\n    stripeKey: pablishableKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_c = StripeCheckoutButton;\n\nconst mapDispatchToProps = dispatch => ({\n  clearCart: () => dispatch(clearCart())\n});\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckoutButton\");","map":{"version":3,"sources":["/home/sergei/Work/Crown-Clothing-/client/src/components/stripe-button/stripe-button.component.jsx"],"names":["React","StripeCheckout","axios","clearCart","connect","StripeCheckoutButton","price","priceForStripe","pablishableKey","onToken","token","url","method","data","amount","then","res","alert","catch","error","console","log","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASH,EAAAA;AAAT,CAAD,KAA0B;AACrD,QAAMI,cAAc,GAAGD,KAAK,GAAG,GAA/B;AACA,QAAME,cAAc,GAClB,6GADF;;AAGA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzBR,IAAAA,KAAK,CAAC;AACJS,MAAAA,GAAG,EAAE,SADD;AAEJC,MAAAA,MAAM,EAAE,MAFJ;AAGJC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEP,cADJ;AAEJG,QAAAA,KAAK,EAAEA;AAFH;AAHF,KAAD,CAAL,CAQGK,IARH,CAQSC,GAAD,IAAS;AACbb,MAAAA,SAAS;AACTc,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACD,KAXH,EAYGC,KAZH,CAYUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,KAA/B;AACAF,MAAAA,KAAK,CACH,0FADG,CAAL;AAGD,KAjBH;AAkBD,GAnBD;;AAoBA,sBACE,QAAC,cAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,cAAc,MAHhB;AAIE,IAAA,eAAe,MAJjB;AAKE,IAAA,KAAK,EAAC,gCALR;AAME,IAAA,WAAW,EAAG,kBAAiBX,KAAM,EANvC;AAOE,IAAA,MAAM,EAAEC,cAPV;AAQE,IAAA,UAAU,EAAC,SARb;AASE,IAAA,KAAK,EAAEE,OATT;AAUE,IAAA,SAAS,EAAED;AAVb;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAvCD;;KAAMH,oB;;AAyCN,MAAMiB,kBAAkB,GAAIC,QAAD,KAAe;AACxCpB,EAAAA,SAAS,EAAE,MAAMoB,QAAQ,CAACpB,SAAS,EAAV;AADe,CAAf,CAA3B;;AAIA,eAAeC,OAAO,CAAC,IAAD,EAAOkB,kBAAP,CAAP,CAAkCjB,oBAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\nimport { clearCart } from \"../../redux/cart/cart.actions\";\nimport { connect } from \"react-redux\";\n\nconst StripeCheckoutButton = ({ price, clearCart }) => {\n  const priceForStripe = price * 100;\n  const pablishableKey =\n    \"pk_test_51IWJi6KJCKx0WD0TlB75VbbG97BlTZ5tO6aAzjtrlFK5xi21Viyf2ZTWUnCuYmqP9bpp2VXMv0N1QDcuj5aSu22k003bMpgeBE\";\n\n  const onToken = (token) => {\n    axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount: priceForStripe,\n        token: token,\n      },\n    })\n      .then((res) => {\n        clearCart();\n        alert(\"succesful payment\");\n      })\n      .catch((error) => {\n        console.log(\"Payment Error: \", error);\n        alert(\n          \"There was an issue with your payment! Please make sure you use the provided credit card.\"\n        );\n      });\n  };\n  return (\n    <StripeCheckout\n      name=\"CROWN CLOTHING\"\n      label=\"Pay Now\"\n      billingAddress\n      shippingAddress\n      image=\"https://svgshare.com/i/CUz.svg\"\n      description={`Yout total is $${price}`}\n      amount={priceForStripe}\n      panelLabel=\"Pay Now\"\n      token={onToken}\n      stripeKey={pablishableKey}\n    />\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearCart: () => dispatch(clearCart()),\n});\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);\n"]},"metadata":{},"sourceType":"module"}